
const generateOTP = () => {
  rn =  Math.floor(Math.random() * 9000) + 1000; // Generate a random 4-digit number
  console.log(rn)
  return rn
};

const transporter = nodemailer.createTransport({
  host: 'mail.openjavascript.info', // Corrected hostname
  port: 465,
  secure: true,
  service:"gmail",
  auth: {
    user: 'daregamingtamil@gmail.com',
    pass: "waoretynkwsgcdit"
  }
});

const sendEmail = async (otp) => {

  const html = `The OTP for logging in is ${otp} please enter the otp in the designated place`; // Declaration of html moved here
  try {
    const info = await transporter.sendMail({
      from: 'support@<daregamingtamil@gmail.com>',
      to: 'mugunthan701@gmail.com',
      subject: 'OTP',
      html: html,
    });
    console.log("Email sent:", info.messageId);
  } catch (error) {
    console.error("Error sending email:", error);
  }
};
const startDatabase = async () => {
  try {
    await mongoose.connect(process.env.URI);
    console.log("Connected to MongoDB");
  } catch (err) {
    console.error("Error connecting to MongoDB:", err);
    process.exit(1);
  }
};

startDatabase();

const isConnected = () => {
  return mongoose.connection.readyState === 1;
  console.log("hi")
};

const checkDatabaseConnection = (req, res, next) => {
  if (!isConnected()) {
    return res.status(500).json({ message: "Database is not connected" });
  }
  next(); // Call next to move to the next middleware or route handler
};

app.use(checkDatabaseConnection); // Apply the middleware globally
app.use("/", router);

app.get("/", (req, res) => {
  res.json({ message: 'Initiated backend' });
});


// Connection URI
const uri = process.env.URI;

// Create a Mongoose connection
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });

// Define a schema for your collection (optional)
const Schema = mongoose.Schema;

const collectionSchema = new Schema({
    // Define your schema fields here
    // Example:
    name: String,
    description: String
});

// Define the model for your collection
const Collection = mongoose.model('Collection', collectionSchema);

// Create a new collection document
async function createCollection() {
    try {
        // Insert a new document into the collection
        const newCollection = await Collection.create({
            name: 'New Collection',
            description: 'This is a new collection' 
        });

        console.log('New collection created:', newCollection);
    } catch (error) {
        console.error('Error creating collection:', error);
    } finally {
        // Close the Mongoose connection
        mongoose.connection.close();
    }
}

// createCollection();
const { MongoClient } = require('mongodb');

// Connection URI


// Database Name
const dbName = 'connectED';

// Create a new MongoClient
const client = new MongoClient(uri);